<program> ::= {<external-declaration>}*

<external-declaration> ::= <function-definition>
                         | <declaration>

<function-definition> ::= {<type-specifier>}* <identifier> ( <parameter-list> ) <compound-statement>

<type-specifier> ::= void
                   | int
                   | float

<expression> ::= <logical-or-expression>

<logical-or-expression> ::= <logical-and-expression>
                          | <logical-or-expression || <logical-and-expression>

<logical-and-expression> ::= <inclusive-or-expression>
                           | <logical-and-expression && <equality-expression>

<equality-expression> ::= <additive-expression>
                        | <equality-expression> == <additive-expression>
                        | <equality-expression> != <additive-expression>

<additive-expression> ::= <multiplicative-expression>
                        | <additive-expression> + <multiplicative-expression>
                        | <additive-expression> - <multiplicative-expression>

<multiplicative-expression> ::= <unary-expression>
                              | <multiplicative-expression> * <unary-expression>
                              | <multiplicative-expression> / <unary-expression>
                              | <multiplicative-expression> % <unary-expression>

<unary-expression> ::= <primary-expression>
					 | <unary-operator> <primary-expression>


<primary-expression> ::= <identifier>
                       | <constant>
					   | <identifier> ( {<expression>}* )
                       | ( <expression> )

<constant> ::= <integer-constant>
             | <character-constant>
             | <floating-constant>

<assignment-statement> ::= <identifier> = <expression>

<unary-operator> ::= +
                   | -
                   | !

<parameter-list> ::= <parameter-declaration>
                   | <parameter-list> , <parameter-declaration>

<parameter-declaration> ::= <type-specifier> <identifier>

<declaration> ::=  <parameter-declaration> | <parameter-declaration> = <expression>

<compound-statement> ::= { {<statement>}* }

<declaration-statement> ::= <declaration> ;

<statement> ::= <declaration-statement>
              | <assignment-statement>
              | <compound-statement>
              | <selection-statement>
              | <iteration-statement>
              | <jump-statement>

<selection-statement> ::= if ( <expression> ) <statement>
                        | if ( <expression> ) <statement> else <statement>

<iteration-statement> ::= while ( <expression> ) <statement>

<jump-statement> ::= return {<expression>}? ;